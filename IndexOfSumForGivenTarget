class IndexOfSumForGivenTarget {
	  	 public int[] twoSum(int[] nums, int target) {
	        Map<Integer, Integer> map = new HashMap<>();
	        int numLength=nums.length;
	        for (int i = 0; i <numLength ; i++) {
	            int complement = target - nums[i];
	            if (map.containsKey(complement)) {
	                return new int[] { map.get(complement), i };
	            }
	            map.put(nums[i], i);
	        }
	        return new int[] {-1, -1};
	    }
	    /** Alternatively different approach using ArrayList **/
	     public int[] twoSum1(int[] nums, int target) {
		 List<Integer> list = IntStream.of(nums).boxed().collect(Collectors.toCollection(ArrayList::new));

	        int numLength=list.size();
	        for (int i = 0; i <numLength ; i++) {
	        	
	            int complement = target - nums[i];
	            if (list.contains(complement)) {
	                return new int[] { i , list.indexOf(complement)};
	            }
	        }
	        return new int[] {-1, -1};
	    }
	 
}
